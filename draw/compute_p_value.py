import numpy as np
from scipy import stats

# 提供的数据
data_subset = np.array([
    [0.54, 0.24, 0.60, 1.05, 0.38, 1.18, 1.97, 20.80, 0.65, 1.61, 11.86, 1.26, 1.99, 21.01, 1.8, 1.03, 1.9, 2.74, 1.27, 2.9, 0.63, 0.34, 0.65, 1.16, 0.47, 1.21, 0.73, 0.34, 0.85, 1.39, 0.51, 1.63],
    [0.79, 0.38, 0.92, 1.56, 0.58, 1.81, 3.35, 35.15, 1.32, 2.97, 21.68, 2.54, 3.37, 35.05, 1.92, 1.09, 2.02, 2.88, 1.33, 3.05, 0.74, 0.39, 0.78, 1.23, 0.51, 1.31, 0.73, 0.35, 0.86, 1.43, 0.53, 1.68],
    [0.80, 0.37, 0.92, 1.51, 0.56, 1.75, 3.32, 34.75, 1.59, 3.34, 21.13, 3.00, 3.44, 30.71, 1.84, 1.1, 1.92, 2.85, 1.36, 3.0, 0.70, 0.38, 0.75, 1.20, 0.50, 1.26, 0.72, 0.34, 0.84, 1.40, 0.52, 1.64],
    [0.77, 0.37, 0.90, 1.42, 0.54, 1.66, 3.34, 35.27, 1.29, 2.91, 21.32, 2.53, 3.34, 35.12, 1.85, 1.11, 1.94, 2.93, 1.38, 3.09, 0.76, 0.43, 0.80, 1.12, 0.55, 1.32, 0.72, 0.34, 0.85, 1.39, 0.51, 1.63],
    [0.80, 0.39, 0.93, 1.51, 0.57, 1.76, 2.43, 25.61, 0.98, 2.00, 16.51, 1.97, 2.06, 27.28, 1.94, 1.1, 2.06, 2.99, 1.36, 3.16, 0.59, 0.34, 0.63, 1.08, 0.46, 1.14, 0.74, 0.35, 0.86, 1.44, 0.53, 1.67],
    [0.69, 0.33, 0.82, 1.22, 0.47, 1.42, 3.22, 33.80, 1.22, 2.66, 19.98, 2.27, 2.89, 30.78, 1.79, 1.03, 1.89, 2.72, 1.27, 2.88, 0.71, 0.41, 0.76, 1.27, 0.55, 1.37, 0.73, 0.34, 0.86, 1.41, 0.52, 1.64],
    [ 0.86,  0.41,  1.01,  1.64,  0.61,  1.93,  4.19, 43.25,  1.54,3.29, 21.51,  3.54,  4.04, 37.93,  2.45,  1.07,  2.6 ,  3.87,1.44,  4.12,  0.77,  0.31,  0.83,  2.29,  0.68,  2.45,  0.77, 0.37,  0.9 ,  1.66,  0.63,  1.97]])

# 最后一行是PCDR的数据
pcdr_data_subset = data_subset[-1]

# 其他方法的数据
other_data_subset = data_subset[:-1]

# 计算提升比例
improvement_ratios_subset = (pcdr_data_subset - np.mean(other_data_subset, axis=0)) / np.mean(other_data_subset, axis=0)

# 计算每列的平均提升比例和标准差
mean_improvements_subset = np.mean(improvement_ratios_subset)
std_improvements_subset = np.std(improvement_ratios_subset)

# 样本数量（其他方法的数量）
n_subset = other_data_subset.shape[0]

# 总体平均值假设为 0（没有提升）
mu = 0

# 计算 t 值
t_value_subset = (mean_improvements_subset - mu) / (std_improvements_subset / np.sqrt(n_subset))

# 计算 p 值
p_value_subset = stats.t.sf(np.abs(t_value_subset), df=n_subset-1) * 2  # 双尾测试

print("平均提升比例:", mean_improvements_subset)
print("标准差:", std_improvements_subset)
print("t 值:", t_value_subset)
print("p 值:", p_value_subset)
